import { DynamoDBClient, PutItemCommand, GetItemCommand } from "@aws-sdk/client-dynamodb";

const dynamoDbClient = new DynamoDBClient({ region: "us-east-1" });

export const handler = async (event) => {
  // Add CORS headers to all responses
  const headers = {
    'Access-Control-Allow-Origin': 'http://localhost:3000',
    'Access-Control-Allow-Headers': 'Content-Type,Authorization',
    'Access-Control-Allow-Methods': 'POST,OPTIONS'
  };

  // Handle the OPTIONS preflight request
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 204, // 204 is the standard status code for a successful preflight
      headers: headers,
      body: ''
    };
  }

  try {
    console.log("Received event:", event);

    const eventBody = JSON.parse(event.body);

    // Check if appointment already exists (fullName as primary key)
    const existing = await dynamoDbClient.send(
      new GetItemCommand({
        TableName: "MyTable",
        Key: { fullName: { S: eventBody.fullName } },
      })
    );

    if (existing.Item) {
      return {
        statusCode: 400,
        headers: headers, // Add headers to error response
        body: JSON.stringify({ message: "An appointment with this name already exists" }),
      };
    }

    // Prepare DynamoDB item
    const params = {
      TableName: "MyTable",
      Item: {
        fullName: { S: eventBody.fullName },
        email: { S: eventBody.email },
        contactNumber: { S: eventBody.contactNumber },
        service: { S: eventBody.service },
        appointmentDate: { S: eventBody.appointmentDate },
        timeSlot: { S: eventBody.timeSlot },
        emergencyName: { S: eventBody.emergencyName },
        emergencyNumber: { S: eventBody.emergencyNumber },
        additionalInfo: { S: eventBody.additionalInfo || "" },
      },
    };

    await dynamoDbClient.send(new PutItemCommand(params));

    return {
      statusCode: 200,
      headers: headers, // Add headers to success response
      body: JSON.stringify({ message: "Appointment booked successfully" }),
    };
  } catch (error) {
    console.error("Error booking appointment:", error);
    return {
      statusCode: 500,
      headers: headers, // Add headers to server error response
      body: JSON.stringify({
        message: "Internal server error",
        error: error.message,
      }),
    };
  }
};
